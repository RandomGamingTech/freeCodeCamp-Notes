/*1.- Para comenzar con CSS, normalizamos las reglas CSS apuntando a TODOS los ELEMENTOS con (*)
        incluyendo los ::before y ::after pseudo-selectores.
        - Establecemos el padding y margin ambos a 0 y establecemos el box-sizing en border-box*/

*, ::before, ::after {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

/* 2.- Creamos un selector html y le asignamos una propiedad font-size establecida en 62.5%. Esto establecerá
        el TAMAÑO de FUENTE predeterminado para nuestra página web en 10px (el valor predeterminado del navegador
        es de 16px)
        
        Esto nos facilitará trabajar con unidades rem más adelante, ya que 2rem serían 20 píxeles*/

html {
    font-size: 62.5%;
}

/* 3.- Creamos un selector body. Establecemos la propiedad font-family en Baskervville, con una alternativa de serif. 
        Establecemos la propiedad color en linen y la propiedad background-color en rgb(20, 30, 40)*/

body {
    font-family: Baskervville, serif;
    color: linen;
    background-color: rgb(20, 30, 40);
}

/* 4.- Creamos un selector h1 y establecemos su font-family en Anton con el respaldo de sans-serif */

h1 {
    font-family: Anton, sans-serif;
}

/* 5.- Creamos un selector h2, h3, h4, h5, h6. Le damos una propiedad font-family establecida en Raleway con un respaldo de sans-serif*/

h2,h3,h4,h5,h6 {
    font-family: Raleway, sans-serif;
}

/* 6.- Creamos un selector a y le asignamos le quitamos la decoración, y le damos un color de linen*/

a {
    text-decoration: none;
    color: linen;
}

/* 7.- Ahora estamos listos para armar el diseño de la cuadrícula. CSS Grid ofrece un diseño BIDIMENSIONAL pasado en CUADRÍCULAS, lo que nos da
        la libertad de centrar elementos HORIZONTAL y VERTICALMENTE, mientras conservamos el control para hacer cosas como elementos superpuestos.
        - Comenzamos creando un selector main y le asignamos una propiedad display en grid*/

/* 8.- Ahora podemos diseñar la cuadrícula. Grid es similar a Flexbox en que tienen una propiedad especial para los elementos PADRE e HIJO. 
        En este caso, nuestro elemento principal es el elemento main. Configuramos el contenido para que tengamos un diseño de TRES COLUMNAS agregando
        una propiedad grid-template-columns con un valor de 1fr 94rem 1fr
        - Esto creará TRES columnas donde la columna de en medio tiene UN ANCHO MÁXIMO de 94rem, y la PRIMERA y la SEGUNDA de 1fr.
        - Fr quiere decir fracción, por lo que 1fr quiere decir que la primera y la última columna SOLO tendrán una FRACCIÓn del espacio RESTANTE del contenedor de cuadrícula.
        
        NOTA IMPORTANTE!!! min-content en grid-column nos sirve para definir que el ANCHO mínimo será según el TAMAÑO DEL CONTENIDO, pero este no sobrepasará el ANCHO MÁXIMO.
                            min-content en grid-row nos sirve para definir EL ALTO de la fila SEGÚN EL CONTENIDO, pero sin sobrepasar el alto máximo.*/

/* 9.- Usamos la FUNCIÓn minmax para hacer que las COLUMNAS se ADAPTEN a CUALQUIER DISPOSITIVO.
        - La función minmax toma dos argumentos, siendo el PRIMERO el valor MÍNIMO y el SEGUNDO el MÁXIMO. 
            Estos valores pueden ser una LONGITUD, un PORCENTAJE, FR, o INCLUSO una PALABRA CLAVE como max-content
        - Envolvemos cada uno de nuestros valores YA DEFINIDOS con la propiedad grid-template columns en una FUNCIÓN minmax, usando cada valor como SEGUNDO argumento.*/

/* 10.- Para agregar espacio entre filas en el diseño de cuadrícula, podemos usar la propiedad row-gap. Le damos al elemento main una propiedad row-gap de 3rem*/

main {
    display: grid;
    grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(2rem, 1fr);
    row-gap: 3rem;
}

/* 11.- Nuestra revista tendrá 3 secciones. Ya configuramos el diseño general en la regla main, pero PODEMOS ajustar la ubicación en las reglas SECUNDARIAS...
        - Una opción es la propiedad grid-column, que es la abreviatura de grid-column-start y grid-column-end. La propiedad grid-column le dice al elemento 
            de la cuadrícula EN QUÉ LÍNEA de la cuadrícula debe COMENZAR y TERMINAR
        -Creamos una regla .heading y la establecemos en grid-column con valor 2/3.
            Esto le indicará al elemento .heading que comience en la linea de cuadrícula 2 y finalice en la línea de cuadrícula 3 (o sea, como nuestra cuadrícula se DIVIDE en 
            3 partes, con esto le decimos grid que .heading comenzará en la sección 2 y terminará cuando comience la 3)*/

/* 13.- Podemos tener un control ADICIONAL sobre el diseño de nuestro contenido, podemos tener una cuadrícula CSS DENTRO de otra cuadrícula CSS
        -Establecemos la propiedad display de heading en grid*/

/* 14.- Ahora podemos diseñar el contenido del elemento .heading con CSS Grid.
        -La función CSS repeat() se usa para REPETIR un VALOR, en lugar de escribirlo manualmente, y es útil para los diseños de cuadrícula. Por ejemplo,
            establecer la propiedad grid-template-columns en repeat(20,200px) crearía 20 columnas cada una de 200px de ANCHO.
        -Le damos a nuestro elemento .heading una propiedad grid-template-columns establecida en repeat(2,1fr) PARA CREAR DOS COLUMNAS DEL MISMO ANCHO.*/

/* 15.- Le damos a nuestro selector heading una propiedad row-gap establecida en 1.5rem
        NOTE! Recordar que la propiedad row-gap nos sirve para agregar espacio VERTICALMENTE a las COLUMNAS que tengamos creadas con el diseño de columnas (grid-template-columns)*/

/* 34.- Creamos un selector hr y le asignamos una propiedad margin establecida en 1.5rem 0
        - Esto acomodó nuestras líneas hechas con el elemento hr */
        
/* 35.- Para darle a hr un color, debemos ajustar la propiedad BORDER. 
        - Le damos al selector hr una propiedad border establecida en 1px solid rgba(120, 120, 120, 0.6)*/

hr {
    margin: 1.5rem 0;
    border: 1px solid rgba(120, 120, 120, 0.6);
}

.heading {
    display: grid;
    grid-column: 2/3;
    grid-template-columns: repeat(2,1fr);
    row-gap: 1.5rem;
}

/* 12.- Creamos el selector para la class text con, y le asignamos una propiedad grid-column establecida en 2/3 (para que el elemento text se alinea con heading)*/

/* 29.- Asignamos al selector .text una propiedad font-size establecida en 1.8rem y una propiedad letter-spacing en 0.6px
        - La propiedad letter-spacing, como su nombre lo indica, sirve para establecer EL ESPACIADO entre las letras.*/

/* 30.- Nuestro elemento text no es un grid, pero PODEMOS CREAR COLUMNAS dentro de nuestro elemento SIN UNSAR GIRD, con la PROPIEDAD COLUMN-WIDTH.
        - Le damos a nuestro .text una propiedad column-width de 25rem
        
        -NOTA! vh y vw son unidades relativas al tamaño de la ventana del navegador.
               rem es relativo al tamaño de la fuente del elemento raíz.
               em es relativo al tamaño de la fuente del elemento en el que se utiliza.*/

/* 31.- Las revistas a menudo usan TEXTO JUSTIFICADO en su contenido impreso para estructurar su diseño y controlar el flujo de su contenido. Si bien funciona en forma impresa,
            el texto justificado EN LOS SITIOS WEB puede ser un PROBLEMA DE ACCESIBILIDAD, por ejemplo, represanta desafíos para las personas con DISLEXIA.
            
        - Para hacer que nuestro proyecto parezca una revista impresa, asignamos al selector .text una propiedad text-align de justify*/

.text {
    grid-column: 2/3;
    font-size: 1.8rem;
    letter-spacing: 0.6px;
    text-align: justify;
    column-width: 25rem;
}

/* 16.- Recordamos que la propiedad grid-column determina en QUÉ COLUMNA COMIENZA y TERMINA un elemento. Puedo haber momentos en los que no estemos seguros de cuántas columnas tendrá nuestra cuadrícula,
        pero deseamos que un elemento se DETENGA en la ÚLTIMA COLUMNA. Para esto, podemos usar -1 para la COLUMNA FINAL.
        -Creamos un selector .hero y le asignamos la propiedad grid-column establecida en 1/-1. 
            Esto le indicará al elemento que abarque TODO EL ANCHO de la cuadrícula.*/

/* 17.- Le damos al selector .hero una propiedad position establecida en relative*/

.hero {
    position: relative;
    grid-column: 1/-1;
}

/* 18.- Creeamos un selector img y le asignamos una propiedad width establecida en 100% y un conjunto de propiedades object-fit para cover.
        La propiedad OBJECT-FIT le dice a nuestro navegador cómo colocar el elemento dentro de su contenedor. En este caso
        cover configurará la imagen para llenar el contenedor, RECORTÁNDOLA SEGÚN sea NECESARIO para EVITAR CAMBIAR la relación-aspecto.*/

img {
    width: 100%;
    object-fit: cover;
}

/* 19.- Creamos un selector .hero-title y le asignamos una propiedad text-align establecida en center y una propiedad color de orangered y una propiedad font-size de 8rem*/

.hero-title {
    text-align: center;
    color: orangered;
    font-size: 8rem;
}

/* 20.- El subtítulo también necesita ser diseñado. Creamos un selector .hero-subtitle y le asignamos una propiedad font-size establecida en 2.4rem, un color en orangered
            y una propiedad text-align en center*/

.hero-subtitle {
    font-size: 2.4rem;
    color: orangered;
    text-align: center;
}

/* 21.- Creamos un selector .author y le asignamos la propiedad font-size en 2rem, un font-family de Raleway con respaldo de sans-serif*/

.author {
    font-size: 2rem;
    font-family: Raleway, sans-serif;
}

/* 22.- Creamos un selector author-name a:hover (esto para señalar que apuntamos al elemento a de la class author name), y le asignamos una propiedad background-color de #306203.
        Esto creará un efecto de desplazamiento, mostrando el freeCodeCamp verde original en el fondo.*/

.author-name a:hover {
    background-color: #306203;
}

/* 23.- Creamos un selector .publish-date y le asignamos una propiedad color de rgba(255,255,255,0.5) 
        - Esto le dará un color TRANSLÚSIDO */

.publish-date {
    color: rgba(255, 255, 255, 0.5);
}

/* 24.- Creamos un selector social-icons. Le damos una propiedad display establecida en grid y una propiedad font-size de 3rem*/

/* 25.- La configuración predeterminada para CSS Grid, CREARÁ filas adicionales según sea NECESARIO, a diferencia de Flexbox.
        - Asignamos una propiedad grid-template-columns establecida en repeat(5, 1fr) para organizar los íconos en una sola fila (creará 5 col de 1fr de ancho)
            ESTO ACOMODÓ NUESTROS ELEMENTOS EN FILA.*/

/* 26.- Si deseamos agregar más íconos sociales, PERO mantenerlos en la MISMA FILA, deberemos actualizar grid-template-columns para crear COLUMNAS ADICIONALES.
        Como ALTERNATIVA, podemos usar la PROPIEDAD GRID-AUTO-FLOW. Esta propiedad toma row o column como PRIMER VALOR, con un segundo valor opcional de dense.
        - grid-auto-flow usa un algoritmo de colocación automática para ajustar el diseño de la cuadrícula. 
            - Establecerlo en column le indicará al algoritmo que cree NUEVAS COLUMNAS para el contenido SEGÚN SEA NECESARIO.
            - El valor dense permite que el algoritmo RETROCEDA y RELLENE LOS HUECOS en la cuadrícula con ELEMENTOS MÁS PEQUEÑOS, lo que puede provocar que los elementos 
                parezcan DESORDENADOS.
        - Para nuestro selector .social-icons, establecemos la propiedad grid-auto-flow en column*/

/* 27.- Ahora el algoritmo de colocación automática se activará cuando agreguemos un nuevo elemento de icono. Sin embargo, el algoritmo establece por defecto que el 
        ancho de la nueva columna sea auto, que NO COINCIDIRÁ con nuestras columnas actuales.
        - Podemos anular esto con la propiedad grid-auto-columns establecida en 1fr*/

/* 28.- Al igual que Flexbox, con CSS Grid, podemos alinear el contenido de los elementos de la cuadrícula con align-items y justify-items.
            - align-items ALINEARÁ los elementos SECUNDARIOS a lo largo del EJE de la COLUMNA (arriba, abajo),
            - justify-content ALINEARÁ los elementos SECUNDARIOS a lo largo del EJE de la FILA.
        - Asignamos una propiedad align-items en center*/

.social-icons {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    font-size: 3rem;
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
    align-items: center;
}

/* 32.- El pseudo-selector ::first-letter nos permite APUNTAR A LA PRIMERA LETRA en el contenido de texto en un elemento.
        - Creamos un selector .first-paragraph::first-letter y lo establecemos en la propiedad font-size 6rem. También le asignamos una propiedad color en orangered para que destaque*/

/* 33.- Debido a que hemos aumentado el tamaño de la letra, el otro texto se ha DESPLAZADO FUERA DE LUGAR. 
        - Arreglamos esto, dándole nuestro selector, una propiedad float, establecida en left y un margin-right de 1rem
        
        - NOTA! Cabe aclarar que float SACA al elemento del FLUJO NORMAL del documento, por lo que en este paso tratamos de acomodarlo con margin.*/

.first-paragraph::first-letter {
    font-size: 6rem;
    color: orangered;
    float: left;
    margin-right: 1rem;
}


/* 36.- Creamos un selector .quote
        - Le asignamos un color de #00beef, una propiedad font-size de 2.4rem y una propiedad text-align de center.*/

/* 37.- Para que el texto de la cita destaque más, le asignamos al selector .quote una propiedad font-family establecida en Raleway con un respaldo de sans-serif*/ 

.quote {
    color: #00beef;
    font-size: 2.4rem;
    text-align: center;
    font-family: Raleway, sans-serif;
}

/* 38.- Una cita no es realmente una cita sin las comillas adecuadas. 
        Podemos agregarlas con pseudo-selectores de CSS.
        
        -Creamos uns elector .quote::before y establecemos la propiedad CONTENT en " con un ESPACIO a continuación.
        -Además creamos un selector .quote::after y establecemos la propiedad CONTENT en " con un espacio ANTES*/

.quote::before {
    content: '" ';
}

.quote::after {
    content: ' "';
}

/* 39.- Ahora es momento de diseñar nuestra tercera section. Debemos tener en cuenta que tenemos los valores .text y .text-width-images para el atributo class,
            lo que significa que ya hereda los estilos de nuestra regla .text
            
        - Creamos un selector .text-with-images y establecemos la propiedad display en grid.*/

/* 40.- Dberemos tener una columna para el texto y una columna para las imágenes. Asignamos al selector .text-with-images una propiedad gird-template-columns establecida en 
        1fr 2fr .
        - También establecimos la propiedad column-gap en 3rem para proporcionar MÁS ESPACIO ENTRE COLUMNAS*/
.text-with-images {
    display: grid;
    grid-template-columns: 1fr 2fr;
    column-gap: 3rem;
    margin-bottom: 3rem;
}

/* 41.- Creamos un selector .lists y establecemos la propiedad LIST-STYLE-TYPE en none. Esto eliminará las viñetas en los elementos de la lista.*/

/* 42.- Asignamos al selector .lists una propiedad margin-top establecida en 2rem*/

.lists {
    list-style-type: none;
    margin-top: 2rem;
}

/* 43.- Creamos una regla .lists li para apuntar a los elementos de la lista dentro de nuestro elemento .lists. 
        - Le damos una propiedad margin-bottom de 1.5rem 
        - ESTO DA ESPACIO INFERIOR A CADA ELEMENTO LI */

.lists li {
    margin-bottom: 1.5rem;
}

/* 44.- Creamos un selector .list-title, list-subtitle 
        - Luego establecemos el color en #00beef */

.list-title, .list-subtitle {
    color: #00beef;
}

/* 45.- Es hora de diseñar la última sección de la revista: las imágenes.
        - Las imágenes se envuelven con un elemento ASIDE usando la clase image-wrapper, así que creamos un selector.
        - Establecemos la propiedad display en grid*/

/* 46.- Las imágenes deben estar dentro de un diseño de DOS columnas y TRES filas.
        - Asignamos al selector .image-wrapper una propiedad grid-template-columns en 2fr 1fr (columnas que MANTIENEN un ANCHO FIJO.) 
            y una grid-template-rows establecida en (3, min-content) (o sea, FILAS SEGÚN LA ALTURA.)...
        - Esto le dará a nuestra cuadrícula filas que se ajustan en altura según el contenido, pero columnas que mantienen un ANCHO FIJO*/

/* 47.- La propiedad GAP es una forma abreviada de establecer el varlo de column gap y row-gap AL MISMO TIEMPO.
        - Si le damos UN SOLO VALOR, establece tanto column-gap como row-gap con ESE VALOR.
        - Si le damos DOS VALORES, establece row-gap en el PRIMER VALOR y column-gap EN EL SEGUNDO.
        - Le damos a nuestro selector .image-wrapper una propiedad gap establecida en 2rem*/

/* 48.- La propiedad place-items se puede usar para establecer los valores align-items y justify-items AL MISMO TIEMPO.
        - La propiedad place-items, toma UNO o DOS valores.
        - Si se proporciona UN VALOR, se utilizará para ambas (align-items y justify-items).
        - Si se proporciona DOS VALORES, EL PRIMER valor se usará para ALIGN-ITEMS, y el SEGUNDO VALOR se usará para JUSTIFY-ITEMS
        - Asignamos al selector .image-wrapper una propiedad place-items establecida en center.*/

.image-wrapper {
    display: grid;
    grid-template-columns: 2fr 1fr;
    grid-template-rows: repeat(3, min-content);
    gap: 2rem;
    place-items: center;
} 

/* 48.- Creamos una regla .image-1, .image-3 y asignamos una propiedad grid-column establecida en 1 / -1.
        - Esto permitirá que la PRIMERA y la TERCERA imagen abarquen TODO EL ANCHO DE LA CUADRÍCULA*/

.image-1, .image-3 {
    grid-column: 1 / -1;
}

/* 49.- Ahora que el diseño de la revista está terminado, debemos hacerlo ADAPTABLE. 
        - Comenzamos con una consulta @media para only screen con un max-width de 720px. Dentro, creamos un selector .image-wrapper y le damos una propiedad
            grid-template-columns de 1fr
        - Esta media query garantiza que SOLO LOS DISPOSITIVOS con PANTALLA y que cuando tenga un max-width de 720px se les aplique la condición*/

@media only screen and (max-width: 720px) {
    .image-wrapper {
        grid-template-columns: 1fr;
    }
}

/* 50.- Creamos otro @media only screen con un max-width de 600px.
        Dentro, creamos una regla .text-with-images y le asignamos una propiedad grid-template-columns de 1fr. 
        - Esto colapsará el área de TEXTO INFERIOR en UNA sola columna en pantallas más PEQUEÑAS (El texto INFERIOR
        o sea, el de A BRIEF STORY, se centrará EN UNA SOLA COLUMNA
            cuando sea de 600px de ancho) */

@media only screen and (max-width: 600px) {
    .text-with-images {
        grid-template-columns: 1fr;
    }
}

/* 51.- Creamos una TERCER media query para only screen con un max-width de 550 px. 
            Dentro, creamos un selector .hero-title con un font-size de 6rem,
            un .hero-subtitle, .author, .quote, .list-title selector con un font-size de 1.8rem,
            un selector .social-icons con font-size de 2rem y un selector .text con font-size de 1.6rem*/

@media only screen and (max-width: 550px) {

    .hero-title {
        font-size: 6rem;
    }

    .hero-subtitle, .author, .quote, .list-title {
        font-size: 1.8rem;
    }

    .social-icons {
        font-size: 2rem;
    }

    .text {
        font-size: 1.6rem;
    }
}

/* 52.- Creamos una última consulta para only screen con max-width de 420px.
        Dentro creamos un selector .hero-title con una propiedad font-size de 4-5rem */
        /* Y listo! hemos terminado! :D*/

@media only screen and (max-width: 420px) {

    .hero-title {
        font-size: 4.5rem;
    }
}